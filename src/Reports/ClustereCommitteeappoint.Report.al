// Report 70056 "Clustere Committee appoint"
// {
// 	WordLayout = './Layouts/ClustereCommitteeappoint.docx'; DefaultLayout = Word;

// 	dataset
// 	{
// 		dataitem(UnknownTable70141;Table70141)
// 		{
// 			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
// 			column(ReportForNav_Table70141; ReportForNavWriteDataItem('Table70141',UnknownTable70141)) {}
// 			column(logo; corec.Picture)
// 			{
// 			}
// 			column(DocumentNo_IFSTenderCommittee; "IFS Tender Committee"."Document No.")
// 			{
// 			}
// 			column(Description_IFSTenderCommittee; "IFS Tender Committee".Description)
// 			{
// 			}
// 			column(AppointmentEffectiveDate_IFSTenderCommittee; "IFS Tender Committee"."Appointment Effective Date")
// 			{
// 			}
// 			column(AppointingAuthority_IFSTenderCommittee; "IFS Tender Committee"."Appointing Authority")
// 			{
// 			}
// 			column(TenderName_IFSTenderCommittee; "IFS Tender Committee"."Tender Name")
// 			{
// 			}
// 			column(ExaminedBy; UserSetup1."Employee Name")
// 			{
// 			}
// 			column(ExaminedBy_Signature; UserSetup1.Picture)
// 			{
// 			}
// 			dataitem(UnknownTable70142;Table70142)
// 			{
// 				DataItemLink = "Document No."=field("Document No.");
// 				column(ReportForNavId_28; 28) {} // Autogenerated by ForNav - Do not delete
// 				column(ReportForNav_Table70142; ReportForNavWriteDataItem('Table70142',UnknownTable70142)) {}
// 				column(Role_IFSTenderCommitteeMember; "IFS Tender Committee Member".Role)
// 				{
// 				}
// 				column(MemberName_IFSTenderCommitteeMember; "IFS Tender Committee Member"."Member Name")
// 				{
// 				}
// 				trigger OnPreDataItem();
// 				begin
// 					ReportForNav.OnPreDataItem('Table70142',UnknownTable70142);
// 				end;
// 				trigger OnAfterGetRecord();
// 				begin
// 					if "IFS Tender Committee Member".Role="IFS Tender Committee Member".Role::Chairperson then
// 					Chairman:="IFS Tender Committee Member"."Member Name";
// 				end;

// 			}
// 			dataitem(UnknownTable70223;Table70223)
// 			{
// 				DataItemLink = "Document No."=field("Document No.");
// 				column(ReportForNavId_47; 47) {} // Autogenerated by ForNav - Do not delete
// 				column(ReportForNav_Table70223; ReportForNavWriteDataItem('Table70223',UnknownTable70223)) {}
// 				column(IFSCode_IFSTenderCommitteEntry; "IFS Tender Committe Entry"."IFS Code")
// 				{
// 				}
// 				column(TenderName_IFSTenderCommitteEntry; "IFS Tender Committe Entry"."Tender Name")
// 				{
// 				}
// 				column(ExternalDocumentNo_IFSTenderCommitteEntry; "IFS Tender Committe Entry"."External Document No")
// 				{
// 				}
// 				column(TenderOpeningDate_IFSTenderCommitteEntry; "IFS Tender Committe Entry"."Tender Opening Date")
// 				{
// 				}
// 				column(TenderOpeingTime_IFSTenderCommitteEntry; "IFS Tender Committe Entry"."Tender Opeing Time")
// 				{
// 				}
// 				trigger OnPreDataItem();
// 				begin
// 					ReportForNav.OnPreDataItem('Table70223',UnknownTable70223);
// 				end;
// 			}
// 			trigger OnPreDataItem();
// 			begin
// 				corec.Get;
// 				corec.CalcFields(Picture);
// 				ReportForNav.OnPreDataItem('Table70141',UnknownTable70141);
// 			end;

// 			trigger OnAfterGetRecord();
// 			begin
// 				IFS.Reset;
// 				IFS.SetRange(Code,"IFS Tender Committee"."IFS Code");
// 				if IFS.FindSet then begin
// 				  IFSDates:=IFS."Bid Opening Date";
// 				  IFSTime:=IFS."Bid Opening Time";
// 				  end;
// 				  //Approvals
// 				ApprovalEntries.Reset;
// 				ApprovalEntries.SetRange("Table ID",70141);
// 				ApprovalEntries.SetRange("Document No.","IFS Tender Committee"."Document No.");
// 				ApprovalEntries.SetRange(Status,ApprovalEntries.Status::Approved);
// 				if ApprovalEntries.Find('-') then begin
// 				   i:=0;
// 				 repeat
// 				 i:=i+1;
// 				if i=1 then begin
// 				Approver[1]:=ApprovalEntries."Sender ID";
// 				ApproverDate[1]:=ApprovalEntries."Date-Time Sent for Approval";
// 				 if UserSetup.Get(Approver[1]) then
// 					UserSetup.CalcFields(Picture);
// 				Approver[2]:=ApprovalEntries."Approver ID";
// 				ApproverDate[2]:=ApprovalEntries."Last Date-Time Modified";
// 				 if UserSetup1.Get(Approver[2]) then
// 					UserSetup1.CalcFields(Picture);
// 				end;
// 				if i=2 then
// 				begin
// 				Approver[3]:=ApprovalEntries."Approver ID";
// 				ApproverDate[3]:=ApprovalEntries."Last Date-Time Modified";
// 				 if UserSetup2.Get(Approver[3]) then
// 					UserSetup2.CalcFields(Picture);
// 				end;
// 				if i=3 then
// 				begin
// 				Approver[4]:=ApprovalEntries."Approver ID";
// 				ApproverDate[4]:=ApprovalEntries."Last Date-Time Modified";
// 				 if UserSetup3.Get(Approver[4]) then
// 					UserSetup3.CalcFields(Picture);
// 				end;
// 				until
// 				ApprovalEntries.Next=0;
// 				end;
// 			end;

// 		}
// 	}
// 	requestpage
// 	{
// 		SaveValues = false;
// 		layout
// 		{
// 		}

// 	}

// 	trigger OnPreReport()
// 	begin
// 		corec.Get;
// 		corec.CalcFields(Picture);
// 		;ReportsForNavPre;

// 	end;
// 	var
// 		corec: Record "Company Information";
// 		SerialNo: Integer;
// 		Chairman: Text[70];
// 		IFSDates: Date;
// 		IFS: Record "Standard Purchase Code";
// 		IFSTime: Time;
// 		ApprovalEntries: Record "Approval Entry";
// 		Approver: array [10] of Code[50];
// 		ApproverDate: array [10] of DateTime;
// 		UserSetup: Record "User Setup";
// 		UserSetup1: Record "User Setup";
// 		UserSetup2: Record "User Setup";
// 		UserSetup3: Record "User Setup";
// 		i: Integer;
// 	trigger OnInitReport();
// 		begin
// 			;ReportsForNavInit;
// 		end;

// 	// --> Reports ForNAV Autogenerated code - do not delete or modify
// 	var
// 		ReportForNav: Codeunit "ForNAV Report Management";
// 		ReportForNavTotalsCausedBy: Integer;
// 		ReportForNavInitialized: Boolean;
// 		ReportForNavShowOutput: Boolean;

// 	local procedure ReportsForNavInit()
// 	var
// 		id: Integer;
// 		FormatRegion: Text;
// 	begin
// 		Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
// 		ReportForNav.OnInit(id);
// 	end;
// 	local procedure ReportsForNavPre() begin end;
// 	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
// 	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
// 	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
// 	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
// 	var
// 		values: Text;
// 		jsonObject: JsonObject;
// 		currLanguage: Integer;
// 	begin
// 		if not ReportForNavInitialized then begin
// 			ReportForNavInit(jsonObject);
// 			ReportForNavInitialized := true;
// 		end;

// 		case (dataItemId) of
// 			'Table70141':
// 				begin
// 					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Table70141$CurrentKey$Text',UnknownTable70141.CurrentKey); GlobalLanguage := currLanguage;
// 				end;
// 			'Table70142':
// 				begin
// 					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Table70142$CurrentKey$Text',UnknownTable70142.CurrentKey); GlobalLanguage := currLanguage;
// 				end;
// 			'Table70223':
// 				begin
// 					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Table70223$CurrentKey$Text',UnknownTable70223.CurrentKey); GlobalLanguage := currLanguage;
// 				end;
// 		end;
// 		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
// 		jsonObject.WriteTo(values);
// 		exit(values);
// 	end;
// 	// Reports ForNAV Autogenerated code - do not delete or modify -->
// }
